#!/bin/sh
# Post-installation script for k3s package

. /lib/functions/network.sh

BIN_DIR=/usr/bin
CONFIG_FILE=/etc/rancher/k3s/config.yaml

create_symlinks() {
    for cmd in kubectl crictl ctr; do
        if [ ! -e "${BIN_DIR}/${cmd}" ]; then
            which_cmd=$(command -v ${cmd} 2>/dev/null || true)
            if [ -z "${which_cmd}" ]; then
                ln -sf /usr/bin/k3s "$BIN_DIR/${cmd}"
            else
                echo "Skipping ${BIN_DIR}/${cmd} symlink to k3s, command exists in PATH at ${which_cmd}"
            fi
        else
            echo "Skipping ${BIN_DIR}/${cmd} symlink to k3s, already exists."
        fi
    done
}

setup_interface() {
    local DEFAULT_INTERFACE="1000M"

    network_get_ipaddr BIND_ADDR "${DEFAULT_INTERFACE}"
    network_get_device BIND_DEVICE "${DEFAULT_INTERFACE}"

    while true; do
        printf "Specify the interface for k3s binding, ENTER to use %s: " "${DEFAULT_INTERFACE}"
        read -r input
        [ -n "${input}" ] && {
            network_get_ipaddr BIND_ADDR "${input}"
            network_get_device BIND_DEVICE "${input}"
        }
        [ -z "${BIND_ADDR}" ] && echo "\033[0;31mNo IP found for interface ${input}.\033[0m" && continue
        [ -z "${BIND_DEVICE}" ] && echo "\033[0;31mCAN'T find device name of interface ${input}.\033[0m" && continue
        break
    done
}

setup_keepalived() {
    local role="BACKUP"
    local vip=""

    while true; do
        printf "Specify the IP for keepalived to use as VIP, ENTER to skip: "
        read -r input
        [ -z "${input}" ] && return
        [ -n "${input}" ] && { vip=${input}; break; }
    done

    printf "Run keepalived as a MASTER node? ENTER or [Y/y] is YES, any other input as BACKUP node: "
    read -r input
    [ -z "${input}" ] || [ "${input}" = "y" ] || [ "${input}" = "Y" ] && role="MASTER"

    cat << EOF > /etc/keepalived/keepalived.conf
vrrp_instance VI_1 {
    state ${role}
    interface ${BIND_DEVICE}
    virtual_router_id 61
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass "Woofu9ixierovunu"
    }
    virtual_ipaddress {
        ${vip}
    }
}
EOF
    service keepalived stop
    sleep 1
    service keepalived start
    service keepalived enable
}

setup_k3s() {
    local role="agent"
    local server=""
    local token=""

    printf "Setup as a k3s SERVER node? ENTER or Y/y is YES, any other input as an agent node: "
    read -r input
    [ -z "${input}" ] || [ "${input}" = "y" ] || [ "${input}" = "Y" ] && role="master"

    if [ "${role}" = "master" ]; then
        printf "Specify k3s server node address to join, ENTER to SKIP and run a standalone server: "
        read -r server
        if [ -n "${server}" ]; then
            while true; do
                printf "Specify k3s server join token (get from the server file /opt/rancher/k3s/server/token): "
                read -r token
                [ -n "${token}" ] && break
            done
            {
                echo "server: ${server}"
                echo "token: ${token}"
                echo
            } >> "${CONFIG_FILE}"
        fi
        {
            echo "bind-address: ${BIND_ADDR}"
            echo "node-ip: ${BIND_ADDR}"
            echo "node-name: ${BIND_ADDR}"
        } >> "${CONFIG_FILE}"
    else
        while true; do
            printf "Specify k3s server node address to join: "
            read -r server
            [ -n "${server}" ] && break
        done

        while true; do
            printf "Specify k3s agent join token (get from the server file /opt/rancher/k3s/server/agent-token): "
            read -r token
            [ -n "${token}" ] && break
        done
        {
            echo "server: ${server}"
            echo "agent-token: ${token}"
            echo
            echo "bind-address: ${BIND_ADDR}"
            echo "node-ip: ${BIND_ADDR}"
            echo "node-name: ${BIND_ADDR}"
        } >> "${CONFIG_FILE}"
    fi

    service k3s enable
    service k3s start
    echo "Waiting for k3s service to startup..."
    for i in $(seq 1 300); do
        kubectl get nodes >/dev/null 2>&1 && { echo "K3s startup succeeded, try to use kubectl to deploy apps."; return; }
        sleep 1
    done
    echo "\033[0;31mStartup k3s failed, please check k3s logs.\033[0m"
    return 1
}

setup_dashboard() {
    helm list -A | grep "kubernetes-dashboard" >/dev/null 2>&1 && { echo "Kubernetes dashboard already installed."; return; }
    printf "Specify the IP for keepalived to use as VIP, [Y/y] to install: "
    read -r input
    [ "${input}" ! = "y" ] && [ "${input}" ! = "Y" ] && return

    helm upgrade --install kubernetes-dashboard /opt/rancher/k3s/agent/images/kubernetes-dashboard.tgz
}

main() {
    create_symlinks
    setup_interface
    setup_keepalived
    setup_k3s && setup_dashboard
}

main

exit 0
